apiVersion: v1
kind: Secret
metadata:
  labels:
    kasm_app: kasm-secrets
  name: kasm-secrets
  namespace: {{ .Values.namespace | default .Release.Namespace }}
type: Opaque
data:
  # retrieve the Redis secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $namespace := .Values.namespace | default .Release.Namespace | quote }}
  {{- $redisSecretObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $redisSecretData := (get $redisSecretObj "data") | default dict }}
  # set $redisSecret to existing secret data or generate a random one when not exists
  {{- $redisSecret := (get $redisSecretData "redis-password") | default (randAlphaNum 26 | b64enc) (.Values.redisPassword | b64enc) }}
  redis-password: {{ $redisSecret | quote }}
  # retrieve the DB secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $dbSecretObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $dbSecretData := (get $dbSecretObj "data") | default dict }}
  # set $dbSecret to existing secret data or generate a random one when not exists
  {{- $dbSecret := (get $dbSecretData "db-password") | default (randAlphaNum 26 | b64enc) (.Values.dbPassword | b64enc) }}
  db-password: {{ $dbSecret | quote }}
  # retrieve the Manager token secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $managerTokenObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $managerTokenData := (get $managerTokenObj "data") | default dict }}
  # set $managerTokenSecret to existing secret data or generate a random one when not exists
  {{- $managerTokenSecret := (get $managerTokenData "manager-token") | default (randAlphaNum 26 | b64enc) (.Values.managerToken | b64enc) }}
  manager-token: {{ $managerTokenSecret | quote }}
  # retrieve the Service token secret data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $serviceTokenObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $serviceTokenData := (get $serviceTokenObj "data") | default dict }}
  # set $serviceTokenSecret to existing secret data or generate a random one when not exists
  {{- $serviceTokenSecret := (get $serviceTokenData "service-token") | default (randAlphaNum 26 | b64enc) (.Values.serviceToken | b64enc) }}
  service-token: {{ $serviceTokenSecret | quote }}
  # retrieve the Admin Password data using lookup function and when not exists, return an empty dictionary / map as result
  {{- $adminPasswordObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $adminPasswordData := (get $adminPasswordObj "data") | default dict }}
  # set $adminPasswordSecret to existing secret data or generate a random one when not exists
  {{- $adminPasswordSecret := (get $adminPasswordData "admin-password") | default (randAlphaNum 26 | b64enc) (.Values.adminPassword | b64enc) }}
  admin-password: {{ $adminPasswordSecret | quote }}
  # retrieve the User Password using lookup function and when not exists, return an empty dictionary / map as result
  {{- $userPasswordObj := (lookup "v1" "Secret" $namespace "kasm-secrets") | default dict }}
  {{- $userPasswordData := (get $userPasswordObj "data") | default dict }}
  # set $userPasswordSecret to existing secret data or generate a random one when not exists
  {{- $userPasswordSecret := (get $userPasswordData "user-password") | default (randAlphaNum 26 | b64enc) (.Values.userPassword | b64enc) }}
  user-password: {{ $userPasswordSecret | quote }}
