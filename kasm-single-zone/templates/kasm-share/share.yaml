{{/*
Deploy the Share if .Values.kasmApp.servicesToDeploy.kasmShare.deploy set to true
*/}}
{{- if and (.Values.kasmApp.servicesToDeploy.kasmShare.deploy) (.Values.kasmApp.servicesToDeploy.kasmRedis.deploy) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}-deployment
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}
    {{- include "kasm.defaultLabels" . | indent 4 }}
spec:
  replicas: {{ .Values.kasmApp.servicesToDeploy.kasmShare.replicas }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: {{ add1 .Values.kasmApp.servicesToDeploy.kasmShare.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}
  template:
    metadata:
      labels:
        kasm_role: share
        app.kubernetes.io/name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}
        {{- include "kasm.defaultLabels" . | indent 8 }}
    spec:
      restartPolicy: {{ .Values.image.restartPolicy }}
      {{- if .Values.image.pullSecrets }}
        {{- include "image.pullSecrets" . | indent 6 }}
      {{- end }}
      {{- if .Values.kasmApp.applyHardening }}
        {{- include "kasm.podSecurity" . | indent 6 }}
      {{- end }}
      initContainers:
        - name: redis-is-ready
          image: redis:5-alpine
          imagePullPolicy: IfNotPresent
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: kasm-secrets
                  key: redis-password
            - name: REDIS_HOST
              value: kasm-redis
          command:
            - /bin/sh
            - -c
          args:
            - |
              while ! redis-cli -h $(REDIS_HOST) -p 6379 -a $(REDIS_PASSWORD) ping 2>/dev/null | grep -q PONG; do echo "Waiting for Redis to start..."; sleep 5; done
          {{- if .Values.kasmApp.applyHardening }}
            {{- include "kasm.containerSecurity" . | indent 10 }}
          {{- end }}
        {{- include "kasm.apiWaitContainer" . | nindent 8 }}
        {{- if .Values.kasmApp.applyHardening }}
          {{- include "kasm.containerSecurity" . | indent 10 }}
        {{- end }}
      containers:
        - name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}-container
          image: "{{ .Values.kasmApp.servicesToDeploy.kasmShare.image }}:{{ .Values.kasmApp.servicesToDeploy.kasmShare.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kasmApp.name | default "kasm" }}-secrets
                  key: redis-password
            - name: REDIS_HOST
              value: kasm-redis
            - name: SHARE_ID
              value: auto
            - name: SERVER_HOSTNAME
              value: kasm-share
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.kasmApp.name | default "kasm" }}-secrets
                  key: db-password
          resources:
            requests:
              memory: "30Mi"
              cpu: "100m"
          {{- if .Values.kasmApp.applyHardening }}
            {{- include "kasm.containerSecurity" . | indent 10 }}
          {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kasm-share
  namespace: {{ .Values.namespace | default .Release.Namespace }}
  labels:
    app.kubernetes.io/name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}-svc
    {{- include "kasm.defaultLabels" . | indent 4 }}
spec:
  selector:
    app.kubernetes.io/name: {{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}
  ports:
  - name: "{{ .Values.kasmApp.servicesToDeploy.kasmShare.name }}-8182"
    protocol: TCP
    port: 8182
{{- end }}